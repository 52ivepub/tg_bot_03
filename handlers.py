import datetime
import json
import os
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.chat_action import ChatActionMiddleware, ChatActionSender
from apscheduler.jobstores.redis import RedisJobStore 
from aiogram.methods.send_message import SendMessage
from keyboards import (
    reply_keyboard,
    loc_tel_poll_keyboard,
    inline_keys,
    get_inlineKeyboardBuilder,
    send_file_keyboard
)
from middleware import OfficeHoursMiddleware, CounterMiddleware, SchedulerMiddleware
from db_connect import Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler_di import ContextSchedulerDecorator
all_media_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'media')


jobstores = {
    'default': RedisJobStore(jobs_key='dispatched_trips_jobs',
                             run_times_key='dispatched_trips_running',
                             host='localhost',
                             db=2,
                             port=6379)
}
scheduler = ContextSchedulerDecorator(AsyncIOScheduler(jobstores=jobstores))



handler = Router()

handler.message.middleware(CounterMiddleware())
# handler.message.middleware(OfficeHoursMiddleware())   # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
handler.message.middleware(SchedulerMiddleware(scheduler))
handler.message.middleware(ChatActionMiddleware())  # —Å–æ–∑–¥–∞–µ—Ç –∏–ª–ª—é–∑–∏—é —á—Ç–æ –±–æ—Ç —Ç–µ–±–µ —á—Ç–æ —Ç–æ –Ω–∞–±–∏—Ä–∞–µ—Ç


class StepsForm(StatesGroup):
    GET_NAME = State()
    GET_LAST_NAME = State()
    GET_AGE = State()


# async def send_interval(bot: Bot):
#     await bot.send_message(1301478301, '—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥')

async def send_date(bot: Bot):
    await bot.send_message(1301478301, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É')



@handler.message(Command("start"))
async def start(message: Message, counter: str, bot: Bot):
    await message.answer(f"—Å–æ–æ–±—â–µ–Ω–∏–µ # {counter}")
    await message.answer("–ø—Ä–∏–≤–µ—Ç")
    
    # ===========–ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß============
    # scheduler = AsyncIOScheduler()   
    # scheduler.add_job(send_interval, 'interval', seconds=15, kwargs={'bot': bot})
    # scheduler.add_job(send_date, 'date', run_date=datetime.datetime.now() + datetime.timedelta(seconds=5), kwargs={'bot': bot})
    # scheduler.start()
         



@handler.message(Command("inline"))
async def start(message: Message):
    await message.answer("–≤–æ—Ç –∏–Ω–ª–∞–π–Ω", reply_markup=inline_keys)


@handler.message(Command("form"))
async def form(message: Message, state: FSMContext):
    await message.answer(f'{message.from_user.first_name}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å. –í–≤–µ–¥–∏—Ç–µ –∏–º—è')
    # await state.update_data(GET_NAME=message.text)
    await state.set_state(StepsForm.GET_NAME)


@handler.message(StepsForm.GET_NAME)
async def start(message: Message, state: FSMContext):
    await message.answer(f'–¢–≤–æ–µ –∏–º—è:\r\n{message.text}\r\n–¢–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é')
    await state.update_data(name=message.text)
    await state.set_state(StepsForm.GET_LAST_NAME)


@handler.message(StepsForm.GET_LAST_NAME)
async def start(message: Message, state: FSMContext):
    await message.answer(f'–¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è: {message.text} –¢–µ–ø–µ—Ä—å –≤–æ–∑—Ä–∞—Å—Ç')
    await state.update_data(last_name=message.text)
    await state.set_state(StepsForm.GET_AGE)
    

@handler.message(StepsForm.GET_AGE)
async def start(message: Message, state: FSMContext, 
                request: Request, scheduler: AsyncIOScheduler, bot: Bot):
    await message.answer(f'–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {message.text} ')
    await state.update_data(age=message.text)
    context_data = await state.get_data()
    await message.answer(f"–ò–º—è: {context_data.get('name')}\n"
    f"–§–∞–º–∏–ª–∏—è: {context_data.get('last_name')}\n"
    f"–í–æ–∑—Ä–∞—Å—Ç: {context_data.get('age')}")
    await request.add_data(first_name=context_data.get('name'), last_name=context_data.get('last_name'), age=context_data.get('age'))
    await state.clear() 
    scheduler.ctx.add_instance(bot, declared_class=Bot)
    scheduler.add_job(send_date, 'date', 
                      run_date=datetime.datetime.now() + datetime.timedelta(seconds=5), kwargs={'bot': bot})
    scheduler.start()   


@handler.message(Command("bilder"))
async def start(message: Message):
    await message.answer("–≤–æ—Ç bilder", reply_markup=get_inlineKeyboardBuilder())


@handler.callback_query(F.data.contains("iphone_"))
async def callback_send(call: CallbackQuery):
    await call.answer()
    num = call.data[-1]
    await call.message.answer(f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ iphone_{num}")


@handler.message(Command("help"))
async def start(message: Message):
    await message.answer("–≤–æ—Ç –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", reply_markup=loc_tel_poll_keyboard)

@handler.message(Command("files"))
async def start(message: Message):
    await message.answer("–≤–æ—Ç –µ—â–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", reply_markup=send_file_keyboard)



@handler.message(F.text.lower().contains("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"))
async def start(message: Message):
    photo_file = FSInputFile(path=os.path.join(all_media_dir, 'sticker.webp'))
    msg_id = await message.answer_photo(photo=photo_file, 
                                        caption='–ú–æ—è <u>–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</u> –ø–æ–¥–ø–∏—Å—å –∫ <b>—Ñ–æ—Ç–æ</b>')
    print(msg_id.photo[-1].file_id)

@handler.message(F.text.lower().contains("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ"))
async def start(message: Message, bot: Bot):
    audio_file = FSInputFile(path=os.path.join(all_media_dir, 'audio.mp3'))
    msg_id = await message.answer_audio(audio=audio_file, 
                                        caption="<tg-spoiler><b>–¢—ã —Å—É–ø–µ—Ä</b></tg-spoiler>\n")
    print(msg_id.audio.file_id)

@handler.message(F.text.lower().contains("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∂–∏"))
async def start(message: Message, bot: Bot):
    photo_file = FSInputFile(path=os.path.join(all_media_dir, 'sticker.webp'))
    await message.answer_sticker(sticker=photo_file)
    await message.answer("<tg-spoiler><b>–¢—ã —Å—É–ø–µ—Ä</b>üòá</tg-spoiler>\n")
        
    

@handler.message(F.photo)
async def get_photo(message: Message, bot: Bot):
    file = await bot.get_file(message.photo[-1].file_id)
    await message.answer("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ")
    await bot.download_file(file.file_path, f"media/photo{message.photo[-1].file_id[:5]}.jpg")

